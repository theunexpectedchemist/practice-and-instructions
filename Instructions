Well, well, well. Getting the hang of things. Here's how it works.
First, create a repository. Use the "+" all the way at the top right (near the Github logo/log off icon) for that.
(You can insist that this have a "readme" file in it, but it's not required.)
That repository will have branches. If no branches were ever created for it, then the one branch it will have is called "master."
That "master" branch is always the topmost one.
If you wanted a readme file, you'll find that as a file in the lower (and usually more active) area.
You can (and probably will) add files to this in some way.
To do so, you can click on "Add new file" on the right of the active area. However, this will add the file to the Master branch only.
What would become more useful would be to put the file into a different branch, so that any work on the different branch will
not affect what was put into the Master branch (until this is desired).
The easiest way to create a new branch is to click on the Branch: pull down menu on the left (and slightly above) the active area.
This pull down menu is also the easiest way to navigate immediately to the desired branch.
Another way to navigate to the desired branch would be to click on the "Branch" text above the active area.
However, this gets you to an "overview" of all the branches. It is very important to be able to do this, because this overview is
the best way to delete an entire branch. (Just click on "delete" on the right.)
You can easily get to the branch from the "overview" part by clicking on the correct branch.
But back to adding files: When in the correct branch (which might be the Master), click the button that reads "Add new file."
This will open an editor (just like the one that we're in right now), where you can add text.
Before adding text, or editing text, you will have to click on the "pen" on the upper right of the bar over the text.
After adding whatever text you want to the file, you will have to "commit" that file. That's very similar to saving the file, but
it not only saves the file, it throws in a record of what was changed since the last time there was a "commit."
In this way, you can keep adding to the files and adding more files.
In order to delete files, you must first open them. Before clicking on the pen icon that edits the text, you can click on the
garbage can "delete" icon right near it. That will delete your file.
In order to see the differences between the file text as it is now and as it was before editing, you'll have to click on the "Update"
text to the right of the text that opens the file for editing.
Blue text is text added since the last time, and red text is text that got deleted since the last time.
(You might notice that you can add comments to the times that there were edits, which is useful if you want to remember or show the
reason that the edits were made. It seems simple but I have not done this yet.)
mentioned above.
Very important: There is blue text that denotes the repository name and the file you are under. Clicking on these are very important
ways to get back to places above, either to the repository area or the file area, from wherever you are (such as the "overview" area).
(So far I use it as an "emergency get me out of this place" button.)
A branch can have a "pull request." That means that the branch comes with a sort of request that it be modified.
I don't know what else the "pull request" is for otherwise.
When creating a new branch (using the pull-down menu button), the first thing that happens is that the branch gains all the files that
were in the master branch.
You can change the files in the new branch, but this will not change the identical file in the master branch.
However, if the branch is "merged," then the changes to the branch will be transferred to the master branch.
(Note how convenient this is: You start with a master, then immediately go to a branch. This will allow work on the file, but not
lose anything on the original file in master. Only once the new work on the branch is concluded will the original file be modified
by the merge.)
In order to merge the branch, you'll have to first create a pull request.
To merge a branch easily, first get into the "overview" of the branches (by clicking on "Branches" above the active area).
Notice that to the right of the active area, there is a button (for each branch) called "New pull request."
Click on this button. You will then see a new screen that allows a pull request to be created (along with a comment).
Make this pull request.
After the pull request was made, you can get into the "overview of branches" screen. The branch that just had a pull request made
now has a "Open" to the right of the branch listed in the active area. Click on that.
This will give a screen where the choice of "Merge pull request" is allowed. Choosing that will merge the brance into the Master.
The merge will a) transfer all changes to files in the branch will show up in the corresponding files in the Master branch and
b) close the pull request.
Notice that after you merge the branch, there is a suggestion that the branch be closed.
Notice that you can't open a pull request unless something new is done somewhere. This can be the creation of a file or editing
any file and committing the changes.
It's also possible to put branches under other branches. I haven't done that yet.


This branch can be committed as a branch "under" another branch.
		This is done when the radio button is chosen so that this is not a branch under master.
